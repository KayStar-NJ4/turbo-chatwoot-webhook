-- Migration: 022_add_web_platform.sql
-- Description: Add Web platform support (landing page chat widget)
-- Created: 2025-01-11
-- Author: System

-- =====================================================
-- ADD WEB PLATFORM TABLES
-- =====================================================

-- Create web_apps table (simple version - just domain + api_key)
CREATE TABLE IF NOT EXISTS web_apps (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    domain VARCHAR(255) NOT NULL,
    api_key VARCHAR(255) NOT NULL UNIQUE,
    is_active BOOLEAN DEFAULT true,
    created_by INTEGER REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create web_conversations table to store chat sessions
CREATE TABLE IF NOT EXISTS web_conversations (
    id BIGSERIAL PRIMARY KEY,
    web_app_id INTEGER NOT NULL REFERENCES web_apps(id) ON DELETE CASCADE,
    session_id VARCHAR(255) NOT NULL,
    user_identifier VARCHAR(255), -- Could be email, user_id, or anonymous ID
    user_name VARCHAR(255),
    user_email VARCHAR(255),
    user_metadata JSONB, -- Additional user info (browser, IP, location, etc.)
    
    -- Chatwoot integration
    chatwoot_conversation_id BIGINT,
    chatwoot_contact_id BIGINT,
    
    -- Dify integration
    dify_conversation_id VARCHAR(255),
    
    -- Status
    status VARCHAR(50) DEFAULT 'active', -- active, resolved, closed
    last_message_at TIMESTAMP,
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    
    UNIQUE(web_app_id, session_id)
);

-- Create web_messages table to store all messages
CREATE TABLE IF NOT EXISTS web_messages (
    id BIGSERIAL PRIMARY KEY,
    web_conversation_id BIGINT NOT NULL REFERENCES web_conversations(id) ON DELETE CASCADE,
    
    -- Message content
    content TEXT NOT NULL,
    message_type VARCHAR(50) NOT NULL, -- user, bot, system
    
    -- Metadata
    metadata JSONB,
    
    -- Integration IDs
    chatwoot_message_id BIGINT,
    dify_message_id VARCHAR(255),
    
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_web_apps_api_key ON web_apps(api_key);
CREATE INDEX IF NOT EXISTS idx_web_apps_domain ON web_apps(domain);
CREATE INDEX IF NOT EXISTS idx_web_apps_is_active ON web_apps(is_active);

CREATE INDEX IF NOT EXISTS idx_web_conversations_web_app_id ON web_conversations(web_app_id);
CREATE INDEX IF NOT EXISTS idx_web_conversations_session_id ON web_conversations(session_id);
CREATE INDEX IF NOT EXISTS idx_web_conversations_status ON web_conversations(status);
CREATE INDEX IF NOT EXISTS idx_web_conversations_chatwoot_conversation_id ON web_conversations(chatwoot_conversation_id);
CREATE INDEX IF NOT EXISTS idx_web_conversations_last_message_at ON web_conversations(last_message_at);

CREATE INDEX IF NOT EXISTS idx_web_messages_web_conversation_id ON web_messages(web_conversation_id);
CREATE INDEX IF NOT EXISTS idx_web_messages_message_type ON web_messages(message_type);
CREATE INDEX IF NOT EXISTS idx_web_messages_created_at ON web_messages(created_at);

-- Create triggers for updated_at
CREATE TRIGGER update_web_apps_updated_at 
    BEFORE UPDATE ON web_apps 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_web_conversations_updated_at 
    BEFORE UPDATE ON web_conversations 
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Create audit triggers
CREATE TRIGGER audit_web_apps 
    AFTER INSERT OR UPDATE OR DELETE ON web_apps 
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

CREATE TRIGGER audit_web_conversations 
    AFTER INSERT OR UPDATE OR DELETE ON web_conversations 
    FOR EACH ROW EXECUTE FUNCTION audit_trigger_function();

-- Add column comments
COMMENT ON TABLE web_apps IS 'Web applications (landing pages) that can use the chat widget';
COMMENT ON TABLE web_conversations IS 'Chat conversations from web applications';
COMMENT ON TABLE web_messages IS 'Messages in web conversations';

COMMENT ON COLUMN web_apps.domain IS 'Domain of the web application (e.g., example.com)';
COMMENT ON COLUMN web_apps.api_key IS 'API key for authenticating requests from web app';
COMMENT ON COLUMN web_conversations.session_id IS 'Client-side session ID (UUID generated by browser)';
COMMENT ON COLUMN web_conversations.user_identifier IS 'User identifier (email, user_id, or anonymous)';
COMMENT ON COLUMN web_conversations.user_metadata IS 'Additional user metadata (browser info, location, etc.)';

-- Insert default web app for testing
INSERT INTO web_apps (name, domain, api_key, is_active, created_by)
VALUES (
    'Landing Page Chat',
    'localhost:3001',
    'web_' || gen_random_uuid()::text,
    true,
    1
) ON CONFLICT DO NOTHING;
