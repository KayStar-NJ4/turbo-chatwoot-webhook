version: '3.8'

services:
  # Main application
  webhook-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: turbo-chatwoot-webhook
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REPOSITORY_TYPE=${REPOSITORY_TYPE:-redis}
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
      - webhook_data:/app/data
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - webhook-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/webhook/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: webhook-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    networks:
      - webhook-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # PostgreSQL (optional, if using PostgreSQL repository)
  postgres:
    image: postgres:15-alpine
    container_name: webhook-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-chatwoot_webhook}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    restart: unless-stopped
    networks:
      - webhook-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-chatwoot_webhook}"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    profiles:
      - postgresql

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: webhook-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - webhook-app
    restart: unless-stopped
    networks:
      - webhook-network
    profiles:
      - nginx

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: webhook-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - webhook-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: webhook-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - webhook-network
    profiles:
      - monitoring

volumes:
  webhook_data:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  webhook-network:
    driver: bridge