services:
  webhook-app:
    image: ghcr.io/kaystar-nj4/turbo-chatwoot-webhook:latest
    container_name: turbo-chatwoot-webhook-prod
    environment:
      - NODE_ENV=production
      - REPOSITORY_TYPE=redis
      - PORT=3000
      - HOSTNAME=0.0.0.0
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs:rw
      - ./backup:/app/backup:rw
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    depends_on:
      - redis
      - postgres
    networks:
      - webhook-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/webhook/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: webhook-redis-prod
    ports:
      - "127.0.0.1:6381:6379"
    volumes:
      - redis_data:/data
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - webhook-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:16-alpine
    container_name: webhook-postgres-prod
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      - POSTGRES_DB=chatwoot_webhook
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=Turbo@2025
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - /etc/localtime:/etc/localtime:ro
    restart: unless-stopped
    networks:
      - webhook-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chatwoot_webhook"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:stable-alpine
    container_name: webhook-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - webhook-app
    networks:
      - webhook-network
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  webhook-network:
    driver: bridge