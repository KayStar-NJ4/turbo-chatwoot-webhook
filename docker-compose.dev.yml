version: '3.8'

services:
  # Development Backend
  webhook-app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: turbo-chatwoot-webhook-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REPOSITORY_TYPE=${REPOSITORY_TYPE:-redis}
    env_file:
      - .env
    volumes:
      - ./src:/app/src:rw
      - ./scripts:/app/scripts:rw
      - ./logs:/app/logs:rw
      - /app/node_modules
    restart: unless-stopped
    depends_on:
      redis-dev:
        condition: service_healthy
    networks:
      - webhook-dev-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/webhook/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Development Redis
  redis-dev:
    image: redis:7-alpine
    container_name: webhook-redis-dev
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    networks:
      - webhook-dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Development PostgreSQL
  postgres-dev:
    image: postgres:15-alpine
    container_name: webhook-postgres-dev
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${DB_NAME:-chatwoot_webhook_dev}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    networks:
      - webhook-dev-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-chatwoot_webhook_dev}"]
      interval: 10s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    profiles:
      - postgresql

volumes:
  redis_dev_data:
    driver: local
  postgres_dev_data:
    driver: local

networks:
  webhook-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16