const telegramService = require('../services/telegramService');
const messageBroker = require('../services/messageBroker');
const logger = require('../utils/logger');

class TelegramHandler {
  /**
   * X·ª≠ l√Ω webhook t·ª´ Telegram
   * @param {object} req - Express request object
   * @param {object} res - Express response object
   */
  async handleWebhook(req, res) {
    try {
      const update = req.body;
      
      logger.info('Received Telegram webhook', {
        updateId: update.update_id,
        hasMessage: !!update.message
      });

      // X·ª≠ l√Ω tin nh·∫Øn
      if (update.message) {
        const telegramMessage = telegramService.processMessage(update);
        
        if (telegramMessage && !telegramMessage.isBot) {
          // Ch·ªâ x·ª≠ l√Ω tin nh·∫Øn vƒÉn b·∫£n
          if (telegramMessage.text) {
            await messageBroker.handleTelegramMessage(telegramMessage);
          } else {
            // X·ª≠ l√Ω tin nh·∫Øn kh√°c (sticker, h√¨nh ·∫£nh, etc.)
            await this.handleOtherMessage(update.message);
          }
        }
      }

      // X·ª≠ l√Ω callback query (n·∫øu c√≥)
      if (update.callback_query) {
        await this.handleCallbackQuery(update.callback_query);
      }

      // Tr·∫£ v·ªÅ OK ƒë·ªÉ Telegram bi·∫øt webhook ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
      res.status(200).json({ status: 'ok' });

    } catch (error) {
      logger.error('Failed to handle Telegram webhook', {
        error: error.message,
        stack: error.stack,
        body: req.body
      });

      res.status(500).json({ 
        status: 'error', 
        message: 'Internal server error' 
      });
    }
  }

  /**
   * X·ª≠ l√Ω callback query t·ª´ inline keyboard
   * @param {object} callbackQuery - Callback query object
   */
  async handleCallbackQuery(callbackQuery) {
    try {
      const { id, from, data, message } = callbackQuery;
      
      logger.info('Processing Telegram callback query', {
        callbackId: id,
        userId: from.id,
        data: data
      });

      // Answer callback query ƒë·ªÉ x√≥a loading state
      await telegramService.answerCallbackQuery(id, {
        text: 'ƒê√£ x·ª≠ l√Ω!',
        show_alert: false
      });

      // X·ª≠ l√Ω d·ªØ li·ªáu callback
      if (data) {
        await this.processCallbackData(data, from, message);
      }

    } catch (error) {
      logger.error('Failed to handle callback query', {
        error: error.message,
        callbackQuery: callbackQuery
      });
    }
  }

  /**
   * X·ª≠ l√Ω d·ªØ li·ªáu callback
   * @param {string} data - D·ªØ li·ªáu callback
   * @param {object} from - Th√¥ng tin user
   * @param {object} message - Tin nh·∫Øn g·ªëc
   */
  async processCallbackData(data, from, message) {
    try {
      const chatId = message.chat.id;
      
      // V√≠ d·ª• x·ª≠ l√Ω c√°c lo·∫°i callback kh√°c nhau
      switch (data) {
        case 'start_conversation':
          await telegramService.sendMessage(
            chatId,
            'Ch√†o m·ª´ng b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?'
          );
          break;
          
        case 'help':
          await telegramService.sendMessage(
            chatId,
            'ƒê√¢y l√† menu tr·ª£ gi√∫p:\n\n' +
            '‚Ä¢ G·ª≠i tin nh·∫Øn b·∫•t k·ª≥ ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán\n' +
            '‚Ä¢ S·ª≠ d·ª•ng /help ƒë·ªÉ xem menu n√†y\n' +
            '‚Ä¢ S·ª≠ d·ª•ng /start ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i'
          );
          break;
          
        default:
          await telegramService.sendMessage(
            chatId,
            'T√¥i kh√¥ng hi·ªÉu l·ªánh n√†y. Vui l√≤ng th·ª≠ l·∫°i.'
          );
      }

    } catch (error) {
      logger.error('Failed to process callback data', {
        data,
        error: error.message
      });
    }
  }

  /**
   * X·ª≠ l√Ω l·ªánh /start
   * @param {object} message - Tin nh·∫Øn t·ª´ Telegram
   */
  async handleStartCommand(message) {
    try {
      const chatId = message.chat.id;
      const firstName = message.from.first_name || 'B·∫°n';

      const welcomeMessage = `Xin ch√†o ${firstName}! üëã\n\n` +
        'T√¥i l√† chatbot ƒë∆∞·ª£c t√≠ch h·ª£p v·ªõi AI. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n\n' +
        '‚Ä¢ Tr·∫£ l·ªùi c√¢u h·ªèi\n' +
        '‚Ä¢ H·ªó tr·ª£ th√¥ng tin\n' +
        '‚Ä¢ K·∫øt n·ªëi v·ªõi ƒë·ªôi ng≈© h·ªó tr·ª£\n\n' +
        'H√£y g·ª≠i tin nh·∫Øn ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán!';

      await telegramService.sendMessage(chatId, welcomeMessage, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üöÄ B·∫Øt ƒë·∫ßu', callback_data: 'start_conversation' },
              { text: '‚ùì Tr·ª£ gi√∫p', callback_data: 'help' }
            ]
          ]
        }
      });

    } catch (error) {
      logger.error('Failed to handle start command', {
        error: error.message,
        message: message
      });
    }
  }

  /**
   * X·ª≠ l√Ω l·ªánh /help
   * @param {object} message - Tin nh·∫Øn t·ª´ Telegram
   */
  async handleHelpCommand(message) {
    try {
      const chatId = message.chat.id;

      const helpMessage = 'üìã **Menu Tr·ª£ Gi√∫p**\n\n' +
        '**C√°c l·ªánh c√≥ s·∫µn:**\n' +
        '‚Ä¢ `/start` - B·∫Øt ƒë·∫ßu tr√≤ chuy·ªán\n' +
        '‚Ä¢ `/help` - Hi·ªÉn th·ªã menu n√†y\n\n' +
        '**C√°ch s·ª≠ d·ª•ng:**\n' +
        '‚Ä¢ G·ª≠i tin nh·∫Øn b·∫•t k·ª≥ ƒë·ªÉ tr√≤ chuy·ªán v·ªõi AI\n' +
        '‚Ä¢ S·ª≠ d·ª•ng n√∫t b√™n d∆∞·ªõi ƒë·ªÉ t∆∞∆°ng t√°c nhanh\n\n' +
        '**Li√™n h·ªá h·ªó tr·ª£:**\n' +
        'N·∫øu c·∫ßn h·ªó tr·ª£ th√™m, h√£y g·ª≠i tin nh·∫Øn v√† ƒë·ªôi ng≈© s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t!';

      await telegramService.sendMessage(chatId, helpMessage, {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ B·∫Øt ƒë·∫ßu l·∫°i', callback_data: 'start_conversation' }
            ]
          ]
        }
      });

    } catch (error) {
      logger.error('Failed to handle help command', {
        error: error.message,
        message: message
      });
    }
  }

  /**
   * X·ª≠ l√Ω tin nh·∫Øn vƒÉn b·∫£n th√¥ng th∆∞·ªùng
   * @param {object} message - Tin nh·∫Øn t·ª´ Telegram
   */
  async handleTextMessage(message) {
    try {
      const telegramMessage = telegramService.processMessage({ message });
      
      if (telegramMessage && !telegramMessage.isBot) {
        await messageBroker.handleTelegramMessage(telegramMessage);
      }

    } catch (error) {
      logger.error('Failed to handle text message', {
        error: error.message,
        message: message
      });
    }
  }

  /**
   * X·ª≠ l√Ω c√°c lo·∫°i tin nh·∫Øn kh√°c (h√¨nh ·∫£nh, file, etc.)
   * @param {object} message - Tin nh·∫Øn t·ª´ Telegram
   */
  async handleOtherMessage(message) {
    try {
      const chatId = message.chat.id;
      
      // X·ª≠ l√Ω h√¨nh ·∫£nh
      if (message.photo) {
        await telegramService.sendMessage(
          chatId,
          'T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√¨nh ·∫£nh c·ªßa b·∫°n. Hi·ªán t·∫°i t√¥i ch∆∞a th·ªÉ x·ª≠ l√Ω h√¨nh ·∫£nh, nh∆∞ng t√¥i c√≥ th·ªÉ tr√≤ chuy·ªán v·ªõi b·∫°n qua tin nh·∫Øn vƒÉn b·∫£n!'
        );
      }
      
      // X·ª≠ l√Ω file
      else if (message.document) {
        await telegramService.sendMessage(
          chatId,
          'T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c file c·ªßa b·∫°n. Hi·ªán t·∫°i t√¥i ch∆∞a th·ªÉ x·ª≠ l√Ω file, nh∆∞ng t√¥i c√≥ th·ªÉ tr√≤ chuy·ªán v·ªõi b·∫°n qua tin nh·∫Øn vƒÉn b·∫£n!'
        );
      }
      
      // X·ª≠ l√Ω sticker
      else if (message.sticker) {
        await telegramService.sendMessage(
          chatId,
          'Sticker ƒë·∫πp qu√°! üòÑ T√¥i c√≥ th·ªÉ tr√≤ chuy·ªán v·ªõi b·∫°n qua tin nh·∫Øn vƒÉn b·∫£n!'
        );
      }
      
      // X·ª≠ l√Ω voice
      else if (message.voice) {
        await telegramService.sendMessage(
          chatId,
          'T√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c tin nh·∫Øn tho·∫°i c·ªßa b·∫°n. Hi·ªán t·∫°i t√¥i ch∆∞a th·ªÉ x·ª≠ l√Ω tin nh·∫Øn tho·∫°i, nh∆∞ng t√¥i c√≥ th·ªÉ tr√≤ chuy·ªán v·ªõi b·∫°n qua tin nh·∫Øn vƒÉn b·∫£n!'
        );
      }

    } catch (error) {
      logger.error('Failed to handle other message type', {
        error: error.message,
        message: message
      });
    }
  }
}

module.exports = new TelegramHandler();
