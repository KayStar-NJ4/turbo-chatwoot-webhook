name: Deploy to Production

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linter
        run: yarn lint

      - name: Build frontend
        run: yarn build:frontend

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            cd ~/workplace/vision_lab/webhook/staging
            
            # Login to GitHub Container Registry
            echo "${{ secrets.PROD_TOKEN }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Pull latest Docker image (ch·ª©a source code)
            docker pull ${{ env.DOCKER_REGISTRY }}/$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]'):latest
            
            # Stop existing containers
            docker compose -f docker-compose.prod.yml down
            
            # Start new containers
            docker compose -f docker-compose.prod.yml up -d
            
            # Run database migrations
            docker compose -f docker-compose.prod.yml exec -T webhook-app yarn migrate
            
            # Clean up old images
            docker image prune -f
            
            # Show deployment status
            docker compose -f docker-compose.prod.yml ps

      - name: Health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            cd ~/workplace/vision_lab/webhook/staging
            
            # Wait for services to be ready
            sleep 30
            
            # Check health endpoint
            if curl -f http://localhost:7070/health; then
              echo "‚úÖ Deployment successful - Health check passed"
            else
              echo "‚ùå Deployment failed - Health check failed"
              exit 1
            fi
            
            # Show logs for debugging if needed
            echo "=== Recent logs ==="
            docker compose -f docker-compose.prod.yml logs --tail=50

  notify:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "üöÄ Deployment to production completed successfully!"
          else
            echo "‚ùå Deployment to production failed!"
          fi
