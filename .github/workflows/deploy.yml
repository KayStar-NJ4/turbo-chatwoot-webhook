name: Deploy to Production

on:
  push:
    branches: [ master ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linter
        run: yarn lint

      - name: Build frontend
        run: yarn build:frontend

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            cd ~/workplace/vision_lab/webhook/staging
            
            # Create necessary directories
            mkdir -p nginx/html nginx/ssl backup logs
            
            # Create docker-compose.prod.yml
            cat > docker-compose.prod.yml << 'EOF'
            
            services:
              webhook-app:
                image: ghcr.io/kaystar-nj4/turbo-chatwoot-webhook:latest
                container_name: turbo-chatwoot-webhook-prod
                environment:
                  - NODE_ENV=production
                  - REPOSITORY_TYPE=redis
                  - PORT=3000
                  - HOSTNAME=0.0.0.0
                env_file:
                  - .env
                volumes:
                  - ./logs:/app/logs:rw
                  - ./backup:/app/backup:rw
                  - /etc/localtime:/etc/localtime:ro
                restart: unless-stopped
                depends_on:
                  redis:
                    condition: service_healthy
                  postgres:
                    condition: service_healthy
                networks:
                  - webhook-network
                healthcheck:
                  test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/webhook/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
            
              nginx:
                image: nginx:alpine
                container_name: webhook-nginx-prod
                ports:
                  - "9090:80"
                  - "9443:443"
                volumes:
                  - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
                  - ./nginx/html:/usr/share/nginx/html:ro
                  - /etc/localtime:/etc/localtime:ro
                depends_on:
                  webhook-app:
                    condition: service_healthy
                restart: unless-stopped
                networks:
                  - webhook-network
            
              redis:
                image: redis:7-alpine
                container_name: webhook-redis-prod
                ports:
                  - "127.0.0.1:6381:6379"
                volumes:
                  - redis_data:/data
                  - /etc/localtime:/etc/localtime:ro
                restart: unless-stopped
                command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
                networks:
                  - webhook-network
                healthcheck:
                  test: ["CMD", "redis-cli", "ping"]
                  interval: 10s
                  timeout: 5s
                  retries: 3
            
              postgres:
                image: postgres:16-alpine
                container_name: webhook-postgres-prod
                ports:
                  - "127.0.0.1:5432:5432"
                environment:
                  - POSTGRES_DB=chatwoot_webhook
                  - POSTGRES_USER=postgres
                  - POSTGRES_PASSWORD=Turbo@2025
                volumes:
                  - postgres_data:/var/lib/postgresql/data
                  - /etc/localtime:/etc/localtime:ro
                restart: unless-stopped
                networks:
                  - webhook-network
                healthcheck:
                  test: ["CMD-SHELL", "pg_isready -U postgres -d chatwoot_webhook"]
                  interval: 10s
                  timeout: 5s
                  retries: 3
            
            volumes:
              redis_data:
                driver: local
              postgres_data:
                driver: local
            
            networks:
              webhook-network:
                driver: bridge
            EOF
            
            # Create .env file (only essential variables)
            cat > .env << 'EOF'
            NODE_ENV=production
            PORT=3000
            HOSTNAME=0.0.0.0
            LOG_LEVEL=info
            JWT_SECRET=TurboChatwootWebhook2025SecretKeyForJWTTokenGeneration
            DB_HOST=postgres
            DB_PORT=5432
            DB_NAME=chatwoot_webhook
            DB_USER=postgres
            DB_PASSWORD=Turbo@2025
            DB_SSL=false
            EOF
            
            # Create nginx config for subpath deployment
            cat > nginx/nginx.conf << 'EOF'
            events {
                worker_connections 1024;
            }
            
            http {
                include       /etc/nginx/mime.types;
                default_type  application/octet-stream;
                
                upstream webhook_app {
                    server webhook-app:3000;
                }
                
                server {
                    listen 80;
                    server_name _;
                    
                    # Health check endpoint
                    location /webhook/health {
                        return 200 "healthy\n";
                        add_header Content-Type text/plain;
                    }
                    
                    # Proxy all /webhook requests to the app
                    location /webhook/ {
                        proxy_pass http://webhook_app/;
                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto $scheme;
                        proxy_set_header X-Forwarded-Prefix /webhook;
                    }
                    
                    # Admin panel at /webhook/admin
                    location /webhook/admin/ {
                        proxy_pass http://webhook_app/admin/;
                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto $scheme;
                        proxy_set_header X-Forwarded-Prefix /webhook;
                    }
                    
                    # API endpoints at /webhook/api
                    location /webhook/api/ {
                        proxy_pass http://webhook_app/api/;
                        proxy_set_header Host $host;
                        proxy_set_header X-Real-IP $remote_addr;
                        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                        proxy_set_header X-Forwarded-Proto $scheme;
                        proxy_set_header X-Forwarded-Prefix /webhook;
                    }
                }
            }
            EOF
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Pull latest Docker image (chá»©a source code)
            docker pull ${{ env.DOCKER_REGISTRY }}/$(echo ${{ env.IMAGE_NAME }} | tr '[:upper:]' '[:lower:]'):latest
            
            # Stop existing containers
            docker compose -f docker-compose.prod.yml down
            
            # Clean PostgreSQL data to resolve version conflict
            echo "Cleaning PostgreSQL data directory..."
            sudo rm -rf postgres_data
            mkdir -p postgres_data
            
            # Clean Docker volumes
            echo "Cleaning Docker volumes..."
            docker volume rm webhook_postgres_data 2>/dev/null || true
            docker volume rm webhook_redis_data 2>/dev/null || true
            
            # Start new containers
            echo "Starting containers..."
            docker compose -f docker-compose.prod.yml up -d
            
            # Wait a bit for containers to start
            sleep 10
            
            # Check if containers started
            echo "=== Checking if containers started ==="
            docker compose -f docker-compose.prod.yml ps
            
            # Show logs if containers failed to start
            echo "=== Container logs ==="
            docker compose -f docker-compose.prod.yml logs --tail=20
            
            # Run database migrations
            docker compose -f docker-compose.prod.yml exec -T webhook-app yarn migrate
            
            # Clean up old images
            docker image prune -f
            
            # Show deployment status
            docker compose -f docker-compose.prod.yml ps
            
            # Show logs for debugging
            echo "=== Container Status ==="
            docker ps -a
            
            echo "=== Docker Compose Logs ==="
            docker compose -f docker-compose.prod.yml logs --tail=20

      - name: Health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          key: ${{ secrets.PROD_SSH_KEY }}
          port: ${{ secrets.PROD_PORT || 22 }}
          script: |
            cd ~/workplace/vision_lab/webhook/staging
            
            # Wait for services to be ready
            echo "Waiting for services to start..."
            sleep 60
            
            # Check container status
            echo "=== Container Status ==="
            docker ps -a
            
            # Check if nginx is running
            echo "=== Checking Nginx ==="
            docker compose -f docker-compose.prod.yml ps nginx
            
            # Check if webhook-app is running
            echo "=== Checking Webhook App ==="
            docker compose -f docker-compose.prod.yml ps webhook-app
            
            # Check health endpoint
            echo "=== Health Check ==="
            if curl -f http://localhost:9090/webhook/health; then
              echo "â Deployment successful - Health check passed"
            else
              echo "â Deployment failed - Health check failed"
              echo "=== Debug Info ==="
              docker compose -f docker-compose.prod.yml logs --tail=50
              exit 1
            fi

  notify:
    needs: [build-and-deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ needs.build-and-deploy.result }}" == "success" ]; then
            echo "ð Deployment to production completed successfully!"
          else
            echo "â Deployment to production failed!"
          fi
