name: CD - Deploy to Production

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production..."
        echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
        echo "‚úÖ Production deployment completed!"
        
        # Th√™m c√°c b∆∞·ªõc deploy th·ª±c t·∫ø ·ªü ƒë√¢y
        # V√≠ d·ª•: SSH v√†o server, pull image m·ªõi, restart container
        # - name: Deploy via SSH
        #   uses: appleboy/ssh-action@v1.0.0
        #   with:
        #     host: ${{ secrets.PROD_HOST }}
        #     username: ${{ secrets.PROD_USER }}
        #     key: ${{ secrets.PROD_SSH_KEY }}
        #     script: |
        #       docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        #       docker-compose down
        #       docker-compose up -d

  # Health check after deployment
  health-check:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always() && needs.deploy-production.result == 'success'
    
    steps:
    - name: Health check
      run: |
        echo "üîç Running health checks..."
        # Add actual health check logic here
        echo "‚úÖ Health checks passed!"

  # Notify deployment status
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-production, health-check]
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy-production.result }}" == "success" ]; then
          echo "‚úÖ Production deployment successful!"
        else
          echo "‚ùå Deployment failed!"
        fi
