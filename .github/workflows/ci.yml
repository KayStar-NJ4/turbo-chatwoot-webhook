name: CI

on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    name: Lint & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'yarn'
        
    - name: Debug yarn.lock
      run: |
        echo "Checking yarn.lock file..."
        ls -la yarn.lock
        head -5 yarn.lock
        
    - name: Install dependencies
      run: |
        yarn install --frozen-lockfile --silent
      
    - name: Run ESLint (temporarily disabled)
      run: echo "ESLint temporarily disabled - will fix code style later"
      
    - name: Check package.json
      run: |
        echo "Checking package.json structure..."
        node -e "const pkg = require('./package.json'); console.log('Package:', pkg.name, 'Version:', pkg.version);"

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: lint-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build production image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: false
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build development image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.dev
        platforms: linux/amd64
        push: false
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-dev
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Test production image
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test node --version
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test yarn --version
        
    - name: Test development image
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-dev node --version
        docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:test-dev yarn --version

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint-and-test
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
